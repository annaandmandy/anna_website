// src/WeekendReport.jsx

import React, { useState, useEffect } from 'react';
import AOS from "aos";
import "aos/dist/aos.css";

// The public URL you copied from your S3 bucket
const REPORT_URL = 'https://boston-weekend-agent-reports.s3.amazonaws.com/reports/weekend_summary.txt';

const WeekendReport = () => {
  // State to hold the report content
  const [report, setReport] = useState('Loading latest report...');
  // State to handle any potential errors
  const [error, setError] = useState(null);

  useEffect(() => {
    AOS.init({ duration: 1000 });
  }, []);

  useEffect(() => {
    // This function will be called once when the component mounts
    const fetchReport = async () => {
      try {
        const response = await fetch(REPORT_URL);

        // Check if the request was successful
        if (!response.ok) {
          throw new Error(`Failed to fetch report. Status: ${response.status}`);
        }

        const text = await response.text();
        setReport(text);
        setError(null); // Clear any previous errors
      } catch (err) {
        console.error("Error fetching the report:", err);
        setError('Sorry, the weekend report could not be loaded at this time. Please check back later.');
        setReport(''); // Clear the "loading" message
      }
    };

    fetchReport();

    // Optional: Set up an interval to refresh the data automatically
    const intervalId = setInterval(fetchReport, 60 * 60 * 1000); // Refresh every hour

    // Cleanup function to clear the interval when the component unmounts
    return () => clearInterval(intervalId);
  }, []); // The empty dependency array [] means this effect runs only once on mount

  // Function to parse markdown-like formatting
  const parseMarkdown = (text) => {
    const lines = text.split('\n');
    return lines.map((line, index) => {
      // Handle bold text with **
      let parts = line.split(/(\*\*.*?\*\*)/g);
      parts = parts.map((part, i) => {
        if (part.startsWith('**') && part.endsWith('**')) {
          return <strong key={i} className="fw-bold" style={{ fontSize: "1.1rem" }}>{part.slice(2, -2)}</strong>;
        }
        return part;
      });

      // Handle list items starting with -
      if (line.trim().startsWith('- ')) {
        return (
          <li key={index} className="mb-2" style={{ marginLeft: "1.5rem" }}>
            {parts}
          </li>
        );
      }

      // Regular lines
      return (
        <div key={index} className="mb-1">
          {parts.length > 1 ? parts : line || '\u00A0'}
        </div>
      );
    });
  };

  return (
    <div className="container-fluid py-3">
      {/* Heading */}
      <div className="text-center mb-5" data-aos="fade-down">
        <h1 className="fw-bold">Boston Weekend Vibe</h1>
        <p>Your weekly guide to Boston's weekend mood and events</p>
      </div>

      {/* Report container */}
      <div
        className="position-relative rounded mb-5 p-4"
        style={{
          maxWidth: "800px",
          margin: "0 auto",
          background: "linear-gradient(135deg, #ffecd2, #fffbea)",
          boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
        }}
        data-aos="fade-up"
      >
        {error ? (
          <p className="text-danger text-center">{error}</p>
        ) : (
          <div style={{
            whiteSpace: "pre-wrap",
            lineHeight: "1.8",
            fontSize: "1rem",
          }}>
            {parseMarkdown(report)}
          </div>
        )}
      </div>

      {/* Footer */}
      <div className="text-center text-muted" style={{ fontSize: "0.9rem" }} data-aos="fade-up">
        <p>Generated by the Boston Weekend Mood Agent. Last updated periodically.</p>
      </div>
    </div>
  );
};

export default WeekendReport;