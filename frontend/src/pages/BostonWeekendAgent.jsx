// src/WeekendReport.jsx

import React, { useState, useEffect } from 'react';

// The public URL you copied from your S3 bucket
const REPORT_URL = 'https://boston-weekend-agent-reports.s3.amazonaws.com/reports/weekend_summary.txt';

const WeekendReport = () => {
  // State to hold the report content
  const [report, setReport] = useState('Loading latest report...');
  // State to handle any potential errors
  const [error, setError] = useState(null);

  useEffect(() => {
    // This function will be called once when the component mounts
    const fetchReport = async () => {
      try {
        const response = await fetch(REPORT_URL);

        // Check if the request was successful
        if (!response.ok) {
          throw new Error(`Failed to fetch report. Status: ${response.status}`);
        }

        const text = await response.text();
        setReport(text);
        setError(null); // Clear any previous errors
      } catch (err) {
        console.error("Error fetching the report:", err);
        setError('Sorry, the weekend report could not be loaded at this time. Please check back later.');
        setReport(''); // Clear the "loading" message
      }
    };

    fetchReport();

    // Optional: Set up an interval to refresh the data automatically
    const intervalId = setInterval(fetchReport, 60 * 60 * 1000); // Refresh every hour

    // Cleanup function to clear the interval when the component unmounts
    return () => clearInterval(intervalId);
  }, []); // The empty dependency array [] means this effect runs only once on mount

  return (
    <div className="report-container">
      <h2>Boston Weekend Vibe</h2>
      {error ? (
        <p className="error-message">{error}</p>
      ) : (
        // The <pre> tag preserves whitespace (line breaks, spaces) from your text file
        <pre className="report-content">{report}</pre>
      )}
      <p className="footer">
        Generated by the Boston Weekend Mood Agent. Last updated periodically.
      </p>
    </div>
  );
};

export default WeekendReport;